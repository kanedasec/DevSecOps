
name: Full Security Pipeline

on:
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  workflow_dispatch:

jobs:
  static_analysis:
    name: üß† Static Analysis (Semgrep + Bandit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install tools
        run: |
          pip install bandit semgrep

      - name: Run Bandit
        run: |
          bandit -r app -f json -o bandit_results.json || true

      - name: Run Semgrep manually to file
        run: |
          semgrep scan --config p/ci --json > semgrep_results.json || true

      - name: Upload Static Analysis Reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            bandit_results.json
            semgrep_results.json

  container_and_sca_scan:
    name: üê≥ Container & Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    needs: static_analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/trivy

      - name: Install dependencies (for Trivy FS scan)
        run: pip install -r requirements.txt

      - name: Build Docker image manually
        run: |
          docker build -t flask-app:latest -f docker/flask.dockerfile .

      - name: Scan Docker image
        run: |
          trivy image --format json --output trivy_image.json --severity HIGH,CRITICAL flask-app || true

      - name: Scan filesystem (SCA)
        run: |
          trivy fs --format json --output trivy_fs.json --scanners vuln,license,secret --severity HIGH,CRITICAL . || true

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy_image.json
            trivy_fs.json

  evaluate_results:
    name: ‚úÖ Evaluate and Finalize
    runs-on: ubuntu-latest
    needs: [static_analysis, container_and_sca_scan]
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Print Report Files
        run: ls -R reports

      - name: Check for HIGH or CRITICAL Vulnerabilities
        id: check_vulns
        run: |
          image_file="reports/trivy-reports/trivy_image.json"
          fs_file="reports/trivy-reports/trivy_fs.json"
      
          if [ ! -f "$image_file" ] || [ ! -f "$fs_file" ]; then
            echo "‚ùå One or more Trivy reports are missing."
            exit 1
          fi
      
          total=$(jq -e '[.Results[]? | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "$image_file" 2>/dev/null || echo 0)
          total_fs=$(jq -e '[.Results[]? | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "$fs_file" 2>/dev/null || echo 0)
      
          echo "Found $total (image) + $total_fs (fs) HIGH/CRITICAL vulnerabilities"
          total_count=$((total + total_fs))
          echo "VULN_COUNT=$total_count" >> $GITHUB_ENV

      - name: üì¶ Upload Final Report Bundle
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: reports/      

      - name: Fail if High/Critical vulnerabilities found
        if: env.VULN_COUNT != '0'
        run: |
          echo "‚ùå Please correct all High and Critical Vulnerabilities to move to PROD"
          exit 1

      - name: Success message
        if: env.VULN_COUNT == '0'
        run: echo "‚úÖ Everything is in place to go to PROD"
      
      